on:
  push:
    tags:
      - 'v*'
    branches:
      - ci

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: docker buildx setup
        uses: docker/setup-buildx-action@v3

      - name: ghcr.io login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: docker build and push
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }} , ghcr.io/${{ github.repository }}:${{github.ref_name}} , ghcr.io/${{ github.repository }}:cache
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:cache
          cache-to: type=inline,mode=max

      - name: artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build-push.outputs.digest }}
          push-to-registry: true

      - name: release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: "actions/github-script@v7.0.1"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const tag = context.payload.ref.replace(/\/refs\/tags\//, '')
            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                draft: false,
                generate_release_notes: true,
                prerelease: false,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
