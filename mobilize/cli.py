import json
import sys
from contextlib import suppress
from os import path
from pathlib import Path
from typing import Iterable, List, NamedTuple, Optional


class Opts(NamedTuple):
    """Holds the parsed CLI options."""

    out_dir: Path
    urls: Iterable[str]

    @classmethod
    def from_args(cls, args: List[str]) -> "Opts":
        if len(args) < 2:
            _bail(_usage())

        out_dir = Path(args[0])
        if not out_dir.exists() or not out_dir.is_dir():
            _bail(f"output dir needs to be an existing directory, got {out_dir}")

        return cls(out_dir=out_dir, urls=extract_urls(args[1]))


def extract_urls(input_arg: str) -> Iterable[str]:
    """
    Extract URLs from the program input. We're either:
    - reading json.stdio events generated by watchexec
    - interpreting the argument as an URL
    - interpreting the argument as a path to a .url file
    """

    def _json_spy(json_text: str) -> dict:
        print("got json.stdio data: ", json_text)
        return json.loads(json_text)

    if input_arg == "-":
        with suppress(Exception):
            files = {
                str(f["absolute"])
                for line in sys.stdin.readlines()
                for f in _json_spy(line)["tags"]
                if f["kind"] == "path"
                and f.get("filetype", "") == "file"
                and Path(f["absolute"]).exists()
                and path.getsize(f["absolute"]) > 0
            }
            return filter(
                None,
                (_parse_url_file(Path(f)) for f in sorted(files) if f.endswith(".url")),
            )

    if input_arg.startswith("http"):
        return [input_arg]

    if input_arg.endswith("url"):
        url_f = Path(input_arg)
        if url_f.exists() and (url := _parse_url_file(url_f)) is not None:
            return [url]
    return []


def _bail(msg: str) -> None:
    print(msg, file=sys.stderr)
    sys.exit(1)


def _usage() -> str:
    return "Usage: $0 <out_dir> <input_file OR input_url OR - (for json-stdio watchexec compat)>"


def _parse_url_file(url_f: Path) -> Optional[str]:
    with suppress(Exception):
        return next(
            _.split("=")[1]
            for _ in url_f.read_text().splitlines()
            if _.startswith("URL")
        )
    return None
